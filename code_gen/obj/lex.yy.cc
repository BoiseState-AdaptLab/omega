
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1996] =
    {   0,
        0,    0,    0,    0,    0,    0,    8,    8,  142,  140,
        6,    4,  111,  140,    7,  140,  103,  140,   42,  102,
      138,  140,  126,  128,  127,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   97,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   14,  104,   16,  140,   97,
       26,  140,    6,    3,    3,  111,  140,    7,  140,  103,
      140,   42,  102,  138,  140,  126,  128,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   97,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,   14,  104,   16,
        8,    6,    8,    8,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    6,  124,
        0,  139,   10,  105,  115,  138,  114,    1,  118,  129,
      121,  130,    0,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  116,  130,

      130,  130,  130,  130,  108,  130,  130,  130,    0,  130,
      130,  130,  130,  130,  106,    9,    5,   12,  134,   13,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
       11,   15,   17,    0,    0,    6,  124,    0,  139,    0,
       10,  105,  115,  138,  114,    1,  118,  129,  130,    0,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  116,  130,  130,  130,  130,
      130,  108,  130,  130,  130,    0,  130,  130,  130,  130,
      130,  106,    8,    6,    8,    8,    8,    8,    8,    8,

        8,    8,    1,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        0,    0,    0,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  107,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  112,  130,  130,  130,  130,
        0,  130,  130,   24,  130,  130,  130,    0,  134,  134,

      134,  134,  134,  134,  123,  134,  134,  120,  134,  134,
      134,  134,   27,    2,    2,    0,    0,    0,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  107,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      112,  130,  130,  130,  130,    0,  130,  130,   24,  130,
      130,  130,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    0,
        0,    0,  130,  130,  130,  130,   66,  130,  130,  130,
      130,  130,  130,   50,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   81,  130,  130,  130,
       43,  130,  130,  130,  130,  130,  130,  130,   28,  130,
      130,  130,  130,  130,  130,  130,    0,    0,    0,   22,
      134,   20,  134,  134,  122,  134,  134,  119,  110,   25,
      113,  125,  134,    0,    0,    0,  130,  130,  130,  130,
       66,  130,  130,  130,  130,  130,  130,   50,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

       81,  130,  130,  130,   43,  130,  130,  130,  130,  130,
      130,  130,   28,  130,  130,  130,  130,  130,  130,  130,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,  131,    0,    0,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   82,  130,  130,  130,  130,  130,

      130,   45,  130,  130,  130,  130,  130,  130,   19,  130,
      130,    0,    0,    0,   31,  134,  134,   41,  109,  134,
      131,    0,    0,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   82,  130,  130,
      130,  130,  130,  130,   45,  130,  130,  130,  130,  130,
      130,   19,  130,  130,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,  133,  132,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,   44,
      130,   49,   67,   47,  130,  130,  130,  130,  130,  130,
      130,  130,   84,  130,  130,  130,  130,   83,  135,    0,
        0,  134,  134,  134,  133,  132,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   44,  130,   49,   67,   47,
      130,  130,  130,  130,  130,  130,  130,  130,   84,  130,
      130,  130,  130,   83,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   85,  130,   32,  130,  130,  130,   91,  130,
       29,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  137,  136,   48,   46,  134,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   85,  130,   32,  130,  130,

      130,   91,  130,   29,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   56,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   72,   71,
        0,  130,  130,  130,  130,  130,   89,  130,  130,   23,
      130,  134,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,   56,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   72,   71,  130,
      130,  130,  130,  130,   89,  130,  130,   23,  130,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,  130,  130,   61,
      130,  130,  130,  130,  130,  130,  130,  130,  130,   65,
      130,  130,  130,  130,  130,  130,  130,   34,  130,  130,
      130,    0,  130,  130,    0,  130,  130,    0,    0,  130,

      130,  130,  130,   93,  130,  130,  130,  130,  130,  130,
      134,  130,  130,   61,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   65,  130,  130,  130,  130,  130,  130,
      130,   34,  130,  130,  130,    0,  130,  130,    0,  130,
      130,  130,  130,  130,  130,   93,  130,  130,  130,  130,
      130,  130,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,  130,   60,  130,  130,   58,

      130,  130,  130,   62,  130,  130,   57,  130,  130,  130,
       92,   30,    0,  130,  130,   33,  130,  130,    0,    0,
      130,  130,    0,    0,  130,  130,    0,    0,  130,  130,
      130,  130,    0,  130,  130,  130,  130,   88,  130,  130,
      134,  130,   60,  130,  130,   58,  130,  130,  130,   62,
      130,  130,   57,  130,  130,  130,   92,   30,    0,  130,
      130,   33,  130,  130,    0,    0,  130,  130,    0,    0,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       88,  130,  130,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,  130,   64,
      130,  130,  130,  130,  130,  130,   18,  130,  130,    0,
      130,  130,  130,   87,    0,    0,  130,  130,    0,    0,
      130,  130,    0,    0,  130,  130,  130,  130,    0,  130,
      130,  130,  130,   90,   86,  117,  130,   64,  130,  130,
      130,  130,  130,  130,   18,  130,  130,    0,  130,  130,
      130,   87,    0,    0,  130,  130,    0,    0,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   90,   86,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    0,  130,  130,   21,
        0,    0,  130,  130,    0,    0,  130,  130,    0,    0,
      130,  130,  130,  130,   94,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    0,  130,
      130,   21,    0,    0,  130,  130,    0,    0,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
      130,  130,  130,  130,  130,   63,  130,  130,  130,    0,
      130,  130,    0,    0,  130,   76,    0,    0,  130,   75,
        0,    0,  130,  130,  130,  130,  130,   99,  130,  130,
      130,  130,  130,  130,  130,   63,  130,  130,  130,    0,
      130,  130,    0,    0,  130,   76,    0,    0,  130,   75,
      130,  130,  130,  130,  130,   99,  130,  130,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,  130,  130,
      130,  130,  130,  130,  130,  130,    0,  130,  130,    0,
       74,   80,    0,   73,   79,    0,    0,  130,  130,  130,
      130,   96,  130,   98,  130,  130,  130,  130,  130,  130,
      130,  130,    0,  130,  130,    0,   74,   80,    0,   73,
       79,  130,  130,  130,  130,   96,  130,   98,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,  130,  130,  130,  130,  130,  130,

      130,  130,    0,  130,   68,   78,   77,    0,    0,  130,
      130,  130,  130,   95,  130,  130,  130,  130,  130,  130,
      130,  130,    0,  130,   68,   78,   77,  130,  130,  130,
      130,   95,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,  130,  130,  130,  130,  130,  130,  130,  130,
       69,   70,    0,    0,  130,   40,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   69,   70,  130,   40,
      130,  130,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   55,   52,

      130,  130,   54,  130,  130,  130,    0,    0,  130,  130,
      130,   55,   52,  130,  130,   54,  130,  130,  130,  130,
      130,  130,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,  130,  130,  130,  130,  130,
        0,   38,   37,  130,   39,  130,  130,  130,  130,  130,
       37,  130,   39,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,  130,   59,   53,  100,  130,    0,  130,
      130,   59,   53,  100,  130,  130,    8,    8,    8,    8,
        8,    8,    8,   51,  101,   35,   36,   51,  101,   36,
        8,    8,    8,    8,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    1,    9,   10,   11,
       12,    1,    1,    1,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,   18,
       19,   20,    1,    1,   21,   22,   23,   24,   22,   22,
       22,   25,   26,   22,   22,   27,   22,   22,   28,   29,
       30,   31,   32,   33,   34,   35,   22,   22,   22,   22,
        1,   36,    1,    1,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    5,
        6,    1,    1,    1,    1,    7,    1,    1,    1,    1,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    4,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    4,    1,    4
    } ;

static yyconst flex_int16_t yy_base[2009] =
    {   0,
        0,    0,   59,   60,  125,    0,  191,    0, 3503, 3504,
       67, 3504, 3483, 3495, 3504, 3492, 3490, 3478, 3504, 3504,
     3481, 3477,   54, 3476, 3475,   64,   66,   68,   70,  248,
       72,  250,  252,   74,   76,   79, 3504, 3483,  256,  259,
      262,  254,  265,  267,  269,  271,  273,  280,  275,  282,
      284,   81,  318,  289,  311, 3504, 3427, 3504, 3483,  377,
     3425, 3469,   95, 3504,   96,   74,  327, 3468,   93,   94,
     3467, 3466, 3465,   86,   85,   90,  315,  443,  509, 3432,
     3441, 3424, 3435,  249, 3422, 3437, 3432, 3435, 3456,  575,
      285,  267,  302, 3414,  307, 3428, 3422, 3420, 3419,  278,

     3418, 3414, 3413,  308,  329,  245, 3421, 3446,  329, 3445,
        0,  349, 3445,  265,    0, 3455, 3453, 3441,    0,    0,
     3444, 3440,  337, 3439, 3438,  641,  707, 3404, 3413, 3396,
     3407,  314, 3394, 3409, 3404, 3407,    0,  773,  307,  323,
      322, 3387,  327, 3401, 3395, 3393, 3392,  324, 3391, 3387,
     3386,  329,  378,  332, 3394,    0, 3374,    0,  382, 3504,
     3432, 3504, 3504, 3504, 3504, 3421, 3504, 3504, 3504, 3504,
     3504, 3426,  367,  362,  367,  378,  390,  386,  395,  392,
      412,  401,  397,  454,  461, 3425,  456,  472,  474,  404,
      490,  459,  463,  482,  467,  478,  480,  485,  492,  526,

      536,  542,  528,  544,  465,  546,  548,  553, 3377,  618,
      550,  532,  555,  557, 3504, 3504, 3504, 3504, 3422, 3504,
      559,  420,   59,  560,  387,  624,  358,  595,  379,  558,
     3421, 3504, 3504, 3411, 3410,  614, 3409,  616, 3408,  474,
     3407, 3406, 3405,  605, 3404, 3403, 3402, 3401,  603,  647,
        0, 3377, 3368, 3378, 3368, 3365, 3369, 3358, 3367, 3372,
     3361, 3359,  839, 3368, 3355, 3351, 3351,  368, 3365, 3361,
     3353,  566, 3347, 3346,  551,  491, 3354, 3339, 3337, 3346,
     3339,    0, 3343, 3343,  588,  607,  585, 3343, 3346, 3338,
     3333, 3369,    0,  628,    0,  662,    0,    0,    0,    0,

     3372,    0,    0,    0,    0,    0, 3377,  646,    0, 3343,
     3334, 3344, 3334, 3331, 3335, 3324, 3333, 3338, 3327, 3325,
      905, 3334, 3321, 3317, 3317,  639, 3331, 3327, 3319,  644,
     3313, 3312,  627,  574, 3320, 3305, 3303, 3312, 3305,    0,
     3309, 3309,  625, 3302,  646, 3308, 3311, 3303, 3298,    0,
     3303, 3295, 3310,  677,  682,  684,  686,  659,  692,  719,
      721,  738,  723,  743,  727,  734,  756,  741,  758,  746,
      749,  792,  794,  805,  752,  812,  796,  807,  800,  819,
      852,  814,  856,  862,  875,  729,  879,  858,  803,  817,
     3337,  871,  886,  919,  881,  889,  927,  672, 3339,  744,

      815,  759,  825,  822,  882,  921,  699,  890,  884,  923,
      924,  929, 3338, 3504, 3342,  923,  922,  722, 3301,  900,
     3294, 3296, 3302, 3288, 3296, 3301, 3283, 3286, 3287,    0,
     3282, 3294, 3280, 3292, 3280, 3280, 3288, 3292, 3279, 3272,
     3279, 3288, 3268, 3282, 3281, 3280, 3270, 3278, 3273, 3272,
        0, 3270, 3272, 3275, 3257,  864, 3257, 3270,  782, 3259,
     3268, 3264, 3257, 3249, 3264, 3259,  901, 3252, 3254, 3260,
     3246, 3254, 3259, 3241, 3244, 3245,    0, 3240, 3252, 3238,
     3250, 3238, 3238, 3246, 3250, 3237, 3230, 3237, 3246, 3226,
     3240, 3239, 3238, 3228, 3236, 3231, 3230,    0, 3228, 3230,

     3233, 3215, 3257, 3214, 3227,  911, 3216, 3225, 3221, 3253,
     3207, 3206,  941,  943,  951,  955,  869,  965,  971,  975,
      977,  979,  984,  877,  986,  988,  990,  995,  997,  999,
     1008, 1001, 1005, 1010, 1013, 1016, 1018, 1024, 1034, 1042,
     1044, 1049, 1051, 1053, 1058, 1060, 1062, 1066, 3504, 1068,
     1070, 1072, 1074, 1076, 1080, 1082, 3211, 3203, 3218, 3248,
       77, 3247,  431,  946, 3246,  966,  938, 3245, 3244, 3243,
     3242, 3241, 1003,  943, 1017, 1074, 3200, 3210, 3207, 3190,
        0, 3209, 3186, 3188, 3196, 3218, 3193,    0, 3189, 3185,
     3193, 3194, 1046, 3179, 1063, 3190, 3182, 3177, 3195, 3183,

        0, 3180, 3175, 3174,    0, 3173, 3177, 3176, 3183, 3182,
     3178, 3167, 3201, 3178, 3164, 3176, 3165, 3165, 3160, 3168,
     3201, 3155, 3154, 3159, 3169, 3166, 3149,    0, 3168, 3145,
     3147, 3155, 3177, 3152,    0, 3148, 3144, 3152, 3153, 1057,
     3138, 1066, 3149, 3141, 3136, 3154, 3142,    0, 3139, 3134,
     3133,    0, 3132, 3136, 3135, 3142, 3141, 3137, 3126,    0,
     3138, 3124, 3136, 3125, 3125, 3120, 3128, 3504, 3161, 3160,
     1101, 1105, 1107, 1109, 1112, 1123, 1126, 1128, 1130, 1134,
     1136, 1138, 1140, 1144, 1147, 1149, 1153, 1155, 1160, 1163,
     1167, 1169, 1173, 1181, 1183, 1188, 1190, 1198, 1192, 1201,

     1208, 1210, 1212, 1216, 1221, 1223, 1226, 1231, 1229, 1244,
     1241, 3159, 3113, 3112, 3157,  934,  991, 3156, 3155, 1031,
     3145, 1010, 1112, 3122, 3138, 3101, 3108, 3105, 3113, 3112,
     3132, 3098, 3113, 3093, 3096, 3110, 3109, 3108, 3093, 3095,
     3095, 3091, 3094, 3095, 3087, 3086, 3092,    0, 3084, 3083,
     3101, 3091, 3090, 3095,    0, 3096, 3087, 3075, 3075, 3069,
     3080,    0, 3091, 3076,    0, 3114, 3113, 3082, 3098, 3061,
     3068, 3065, 3073, 3072, 3092, 3058, 3073, 3053, 3056, 3070,
     3069, 3068, 3053, 3055, 3055, 3051, 3054, 3055, 3047, 3046,
     3052,    0, 3044, 3043, 3061, 3051, 3050, 3055,    0, 3056,

     3047, 3035, 3035, 3029, 3040,    0, 3051, 3036, 3504, 3504,
     1246, 1248, 1263, 1250, 1266, 1253, 1255, 1257, 1272, 1285,
     1274, 1290, 1287, 1292, 1294, 1297, 1301, 1306, 1312, 1308,
     1315, 1319, 1321, 1323, 1325, 1330, 1335, 1337, 1341, 1345,
     1348, 1350, 1353, 1355, 1358, 1360, 1368, 1365, 3504, 3074,
     3073,  820, 1141, 1118, 3064, 3063, 1162, 3024, 1357, 3032,
     1220, 3024, 3020, 3020, 3028, 3051, 3029, 1176, 3033, 3022,
     3022, 3029, 3021, 3038, 3026,    0, 3025,    0,    0,    0,
     3024, 3023, 3025, 3000, 2999, 3004, 3021, 3019, 3006, 3015,
     3018, 3009, 3015,    0,    0,    0, 1247, 2995, 1358, 3003,

     1361, 2995, 2991, 2991, 2999, 3022, 3000, 1256, 3004, 2984,
     2977, 2969, 2955, 2972, 2954,    0, 2953,    0,    0,    0,
     2938, 2937, 2937, 2912, 2911, 2912, 2915, 2913, 2900, 2909,
     2912, 2903, 2909,    0, 1381, 1383, 1388, 1398, 1400, 1402,
     1404, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1424,
     1428, 1437, 1441, 1446, 1450, 1452, 1458, 1462, 1468, 1470,
     1472, 1474, 1479, 1481, 1491, 1486, 1488, 1493, 1495, 1497,
     1504, 1506, 3504, 3504, 2936, 2935, 1390, 2893, 2886, 2894,
     1172, 2884, 2899, 2898, 2887, 2879, 2894, 2892, 2884, 2883,
     2873, 2880, 2878, 2870, 2890,    0, 2884,    0,  232,  247,

      365,    0,  458,    0,  482,  520,  649, 1518,  697,  701,
      777,  826, 1006, 1026, 1061, 1090, 1103, 1126, 1297, 1123,
     1154, 1162, 1176, 1191, 1211, 1233, 1264, 1289, 1295, 1312,
     1322, 1319, 1348,    0, 1353,    0, 1361, 1374, 1385,    0,
     1400,    0, 1390, 1407, 1412, 1520, 1416, 1413, 1433, 1430,
     1443, 1469, 1459, 1519, 1521, 1523, 1532, 1527, 1539, 1543,
     1549, 1551, 1553, 1555, 1557, 1565, 1571, 1573, 1575, 1581,
     1583, 1587, 1589, 1594, 1596, 1598, 1600, 1605, 1607, 1614,
     1535, 1618, 1620, 1622, 1631, 1648, 1633, 1636, 1639, 1641,
     1643, 1516, 1468, 1471, 1476, 1498, 1501, 1507, 1526, 1548,

     1545, 1554, 1589, 1596, 1572,    0, 1574, 1598, 1583, 1605,
     1622, 1613, 1624, 1617, 1627, 1611, 1612, 1662, 1663, 1617,
     1629, 1643, 1640, 1659,    0, 1632, 1633,    0, 1629, 1639,
     1642, 1644, 1652, 1647, 1649, 1646, 1659, 1652, 1656, 1683,
     1684, 1659,    0, 1660, 1672, 1655, 1661, 1674, 1663, 1674,
     1667, 1679, 1663, 1663, 1709, 1710, 1686, 1665, 1675, 1689,
     1686, 1705,    0, 1678, 1678,    0, 1674, 1723, 1729, 1733,
     1735, 1737, 1742, 1744, 1746, 1748, 1756, 1750, 1760, 1762,
     1769, 1771, 1773, 1775, 1778, 1782, 1787, 1791, 1793, 1796,
     1798, 1694, 1803, 1805, 1722, 1809, 1812, 1677, 1717, 1815,

     1822, 1826, 1834, 1837, 1841, 1846, 1848, 1852, 1855, 1857,
     1818, 1735, 1741,    0, 1754, 1757, 1761, 1762, 1798, 1788,
     1785, 1793, 1794,    0, 1811, 1807, 1831, 1815, 1810, 1816,
     1862,    0, 1832, 1830, 1826, 1859, 1826, 1842, 1861, 1830,
     1845, 1849, 1856, 1830, 1840, 1888, 1842, 1858, 1856, 1855,
     1852, 1855, 1868, 1860,    0, 1870, 1873, 1864, 1860, 1894,
     1879, 1870, 1875, 1869,    0, 1873, 1866, 1886, 1869, 1864,
     1870, 1915,    0, 1887, 1884, 1880, 1891, 1881, 1896, 1894,
     1884, 1899, 1878, 1888, 1902, 1909, 1882, 1892, 1940, 1893,
     1909, 1907, 1907, 1902, 1902, 1944, 1946, 1949, 1953, 1955,

     1958, 1960, 1962, 1964, 1967, 1969, 1971, 1973, 1975, 1978,
     1981, 1983, 1918, 1985, 1991, 1993, 1995, 2000, 1915, 1938,
     2003, 2007, 1935, 1960, 2010, 2012, 1969, 2020, 2015, 2020,
     2023, 2025, 1975, 2028, 2032, 2034, 2038, 2040, 2045, 2054,
     2029, 1991,    0, 1998, 2006,    0, 2012, 2005, 2013,    0,
     2024, 2017,    0, 2026, 2012, 2032,    0,    0, 2051, 2029,
     2035,    0, 2022, 2034, 2059, 2060, 2031, 2033, 2065, 2068,
     2040, 2040, 2030, 2031, 2058, 2060, 2049, 2049, 2049, 2064,
        0, 2061, 2063, 2059,    0, 2059, 2062,    0, 2067, 2058,
     2066,    0, 2071, 2064,    0, 2073, 2059, 2080,    0,    0,

     2076, 2077, 2083,    0, 2070, 2082, 2072, 2087, 2076, 2076,
     2076, 2091, 2080, 2080, 2094, 2129, 2072, 2073, 2098, 2100,
     2086, 2089, 2089, 2089, 2104,    0, 2101, 2103, 2135, 2137,
     2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2129,
     2160, 2158, 2163, 2165, 2122, 2126, 2168, 2171, 2130, 2132,
     2181, 2174, 2127, 2137, 2190, 2192, 2194, 2197, 2152, 2199,
     2206, 2210, 2213, 2215, 2217, 2200, 2178,    0, 2179, 2175,
     2181, 2182, 2194, 2196,    0, 2190, 2181, 2219, 2202, 2186,
     2192,    0, 2224, 2225, 2208, 2203, 2228, 2229, 2213, 2208,
     2222, 2205, 2196, 2203, 2223, 2218, 2213, 2214,    0,    0,

     2215,    0, 2216, 2212, 2218, 2219, 2231, 2233,    0, 2227,
     2218, 2239, 2241, 2226, 2231,    0, 2233, 2233, 2247, 2242,
     2237, 2237, 2251, 2246, 2229, 2236, 2261, 2244, 2233, 2240,
     2254, 2260, 2255, 2250, 2250,    0,    0, 2292, 2294, 2296,
     2298, 2301, 2303, 2306, 2308, 2310, 2255, 2312, 2314, 2316,
     2277, 2284, 2323, 2326, 2291, 2287, 2330, 2332, 2331, 2282,
     2335, 2338, 2343, 2348, 3504, 2350, 2360, 2355, 2362, 2309,
     2312, 2313, 2304, 2337, 2330, 2333, 2325, 2336, 2363, 2329,
     2337,    0, 2366, 2367, 2342, 2347, 2370, 2371, 2346, 2352,
     2333, 2359, 2362, 2338, 2355, 2361, 2367, 2363, 2371, 2374,

     2371, 2355, 2378, 2369, 2373, 2364, 2375, 2367, 2368, 2376,
        0, 2387, 2382, 2381, 2386, 2391, 2386, 2385, 2390, 2429,
     2372, 2373, 2397, 2400, 2376,    0, 2393, 2398, 2403, 2398,
     2433, 2435, 2437, 2439, 2441, 2443, 2445, 2448, 2450, 2409,
     2452, 2455, 2418, 2425, 2458, 2460, 2426, 2431, 2464, 2466,
     2422, 2429, 2472, 2474, 2476, 2484, 2491, 2493, 2497, 2502,
     2423, 2432, 2446, 2457, 2448,    0, 2459, 2468, 2458, 2497,
     2468, 2480, 2500, 2499, 2470,    0, 2503, 2505, 2473,    0,
     2477, 2476, 2473, 2480, 2480,    0, 2487, 2493, 2479, 2480,
     2487, 2497, 2483,    0, 2497, 2507, 2495, 2504, 2505, 2516,

     2509, 2514, 2506,    0, 2512, 2517, 2509,    0, 2505, 2512,
     2513, 2512, 2509, 2516, 2516,    0, 2522, 2527, 2560, 2562,
     2564, 2566, 2568, 2571, 2573, 2575, 2542, 2577, 2579, 2540,
     3504, 2582, 2543, 3504, 2585, 2535, 2559, 2589, 2591, 2593,
     2600, 2602, 2606, 2612, 2559, 2561, 2563, 2563, 2579, 2588,
     2583, 2587, 2611, 2594, 2577, 2614, 2616,    0, 2617, 2618,
        0, 2602, 2593, 2581, 2605,    0, 2594,    0, 2600, 2601,
     2591, 2589, 2605, 2614, 2607, 2611, 2618, 2620, 2603, 2609,
        0,    0, 2610,    0,    0, 2600, 2624, 2625, 2617, 2605,
     2630,    0, 2619,    0, 2661, 2663, 2665, 2667, 2669, 2671,

     2673, 2676, 2629, 2678, 2680, 3504, 3504, 2643, 2642, 2685,
     2687, 2689, 2694, 2691, 2654, 2655, 2670, 2684, 2658, 2655,
     2676, 2670, 2697, 2662,    0, 2699, 2700, 2671, 2668, 2675,
     2674,    0, 2675, 2677, 2692, 2706, 2680, 2676, 2697, 2690,
     2682, 2684,    0,    0,    0, 2691, 2690, 2692, 2689, 2697,
     2696,    0, 2739, 2741, 2744, 2746, 2748, 2750, 2752, 2755,
     3504, 2757, 2725, 2720, 2760, 2762, 2764, 2766, 2727, 2728,
     2723, 2723, 2731, 2737, 2745, 2747, 2766,    0, 2738,    0,
     2749, 2740, 2743, 2744, 2740, 2740, 2749, 2756, 2766, 2768,
        0,    0, 2768, 2759, 2761,    0, 2772, 2763, 2803, 2806,

     2808, 2810, 2812, 2814, 2816, 2818, 2778, 2775, 2822, 2824,
     2826,    0,    0, 2792, 2790,    0, 2788, 2792, 2803, 2787,
     2792, 2789,    0,    0, 2800, 2798,    0, 2796, 2800, 2811,
     2799, 2796, 2797, 2803, 2800, 2850, 2852, 2857, 2861, 2863,
     2809, 3504, 2859, 2869, 2873, 2812, 2826, 2826, 2839, 2836,
        0, 2837,    0, 2835, 2839, 2838, 2848, 2842, 2843,    0,
        0, 2844,    0, 2884, 2886, 2888, 2894, 2896, 2844, 2899,
     2860,    0,    0,    0, 2871, 2858, 2864,    0,    0,    0,
     2874, 2861, 2863, 2910, 2912, 3504, 2914,    0,    0,    0,
        0,    0,    0,    0, 3504, 2955, 2959, 2963, 2969, 2977,

     2985, 2993, 3001, 3009, 3017, 3025, 3033, 3036
    } ;

static yyconst flex_int16_t yy_def[2009] =
    {   0,
     1995,    1,    1,    1, 1995,    5, 1995,    7, 1995, 1995,
     1995, 1995, 1995, 1996, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1995, 1998, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1995, 1995, 1995, 1995, 1999,
     1995, 2000, 2000, 1995, 1995, 2000, 2001, 2000, 2000, 2000,
     2000, 2000, 2000, 2000, 2000, 2000, 2000, 2002, 2002,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 2000, 2003,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79, 2000, 2000, 2000,
     2004, 2004, 2004, 2005, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2006, 2006,  127,  127,  127,
      127,  127,  127,  127,  127,  127, 2004, 2007,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127, 2004, 2004, 2004, 1995, 1995,
     1996, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1998, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,

     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1995, 1997,
     1997, 1997, 1997, 1997, 1995, 1995, 1995, 1995, 2008, 1995,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 1995, 1995, 2000, 1995, 2000, 2000, 2001, 2000, 1996,
     2000, 2000, 1995, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79, 2003,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79, 2000,   79,   79,   79,   79,
       79, 2000, 2004, 2004, 2004, 2005, 2004, 2004, 2004, 2004,

     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
     2007,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127, 2004,  127,  127,  127,  127,  127, 2004,
     1995, 1995, 1995, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1995, 1997, 1997, 1997, 1997, 1997, 1997, 1995, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 1995, 1996, 2000, 2000, 2000,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79, 2000,   79,   79,   79,   79,
       79,   79, 2004, 2004, 2004,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127, 2004,  127,  127,  127,  127,  127,  127, 1995,
     1995, 1995, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1995, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1995, 1995, 1995, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2000, 2000, 2000,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79, 2000,   79,   79,   79,   79,   79,   79,   79,
     2004, 2004, 2004,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127, 2004,
      127,  127,  127,  127,  127,  127,  127, 1995, 1995, 1995,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,

     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1995, 1995, 1995, 2008, 2008, 2008, 2008, 2008, 2008,
     2000, 2000, 2000,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79, 2004, 2004, 2004,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127, 1995, 1995,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1995, 1995,
     1995, 2008, 2008, 2008, 2000, 2000,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79, 2004, 2004,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1995, 1995, 2008, 2008, 2008,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1995, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 2008,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127, 2004,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1995, 1997, 1997, 1995, 1997, 1997, 1995, 1995, 1997,

     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     2008,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79, 2000,   79,   79, 2000,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127, 2004,  127,  127, 2004,
      127,  127, 2004, 2004,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127, 1997, 1997, 1997, 1997, 1997,

     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1995, 1997, 1997, 1997, 1997, 1997, 1995, 1995,
     1997, 1997, 1995, 1995, 1997, 1997, 1995, 1995, 1997, 1997,
     1997, 1997, 1995, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     2008,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 2000,   79,
       79,   79,   79,   79, 2000, 2000,   79,   79, 2000, 2000,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

     2004,  127,  127,  127,  127,  127, 2004, 2004,  127,  127,
     2004, 2004,  127,  127, 2004, 2004,  127,  127,  127,  127,
     2004,  127,  127,  127,  127,  127,  127,  127, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1995,
     1997, 1997, 1997, 1997, 1995, 1995, 1997, 1997, 1995, 1995,
     1997, 1997, 1995, 1995, 1997, 1997, 1997, 1997, 1995, 1997,
     1997, 1997, 1997, 1997, 1997, 2008,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79, 2000,   79,   79,
       79,   79, 2000, 2000,   79,   79, 2000, 2000,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127, 2004,  127,  127,  127,  127, 2004, 2004,  127,  127,
     2004, 2004,  127,  127, 2004, 2004,  127,  127,  127,  127,
     2004,  127,  127,  127,  127,  127,  127, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1995, 1997, 1997, 1997,
     1995, 1995, 1997, 1997, 1995, 1995, 1997, 1997, 1995, 1995,
     1997, 1997, 1997, 1997, 1995, 1997, 1997, 1997, 1997,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 2000,   79,
       79,   79, 2000, 2000,   79,   79, 2000, 2000,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  127,  127,

      127,  127,  127,  127,  127,  127,  127, 2004,  127,  127,
      127, 2004, 2004,  127,  127, 2004, 2004,  127,  127, 2004,
     2004,  127,  127,  127,  127, 2004,  127,  127,  127,  127,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1995,
     1997, 1997, 1995, 1995, 1997, 1997, 1995, 1995, 1997, 1997,
     1995, 1995, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
       79,   79,   79,   79,   79,   79,   79,   79,   79, 2000,
       79,   79, 2000, 2000,   79,   79, 2000, 2000,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  127,  127,
      127,  127,  127,  127,  127,  127,  127, 2004,  127,  127,

     2004, 2004,  127,  127, 2004, 2004,  127,  127, 2004, 2004,
      127,  127,  127,  127,  127,  127,  127,  127, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1995, 1997, 1997, 1995,
     1995, 1997, 1995, 1995, 1997, 1995, 1995, 1997, 1997, 1997,
     1997, 1997, 1997, 1997,   79,   79,   79,   79,   79,   79,
       79,   79, 2000,   79,   79, 2000, 2000,   79, 2000, 2000,
       79,   79,   79,   79,   79,   79,   79,   79,  127,  127,
      127,  127,  127,  127,  127,  127, 2004,  127,  127, 2004,
     2004,  127, 2004, 2004,  127, 2004, 2004,  127,  127,  127,
      127,  127,  127,  127, 1997, 1997, 1997, 1997, 1997, 1997,

     1997, 1997, 1995, 1997, 1997, 1995, 1995, 1995, 1995, 1997,
     1997, 1997, 1997, 1997,   79,   79,   79,   79,   79,   79,
       79,   79, 2000,   79,   79, 2000, 2000,   79,   79,   79,
       79,   79,  127,  127,  127,  127,  127,  127,  127,  127,
     2004,  127,  127, 2004, 2004, 2004, 2004,  127,  127,  127,
      127,  127, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1995, 1997, 1995, 1995, 1997, 1997, 1997, 1997,   79,   79,
       79,   79,   79,   79,   79,   79, 2000,   79,   79,   79,
       79,   79,  127,  127,  127,  127,  127,  127,  127,  127,
     2004,  127, 2004, 2004,  127,  127,  127,  127, 1997, 1997,

     1997, 1997, 1997, 1997, 1997, 1997, 1995, 1995, 1997, 1997,
     1997,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  127,  127,  127,  127,  127,  127,  127,  127,
     2004, 2004,  127,  127,  127, 1997, 1997, 1997, 1997, 1997,
     1995, 1995, 1997, 1997, 1997,   79,   79,   79,   79,   79,
       79,   79,   79,  127,  127,  127,  127,  127, 2004, 2004,
      127,  127,  127, 1997, 1997, 1997, 1997, 1997, 1995, 1997,
       79,   79,   79,   79,   79,   79,  127,  127,  127,  127,
      127, 2004,  127, 1997, 1997, 1995, 1997,   79,   79,   79,
      127,  127, 2004,  127,    0, 1995, 1995, 1995, 1995, 1995,

     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995
    } ;

static yyconst flex_int16_t yy_nxt[3571] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   10,
       10,   10,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   27,   31,   27,   32,   33,
       34,   35,   27,   27,   36,   37,   38,   39,   27,   40,
       41,   42,   43,   44,   27,   45,   46,   27,   47,   48,
       49,   50,   51,   27,   52,   53,   27,   54,   27,   55,
       27,   27,   27,   56,   57,   58,   59,   59,  159,  398,
      159,  168,  169,  172,  173,  172,  173,  172,  173,  172,
      173,  172,  173,  172,  173,  172,  173,  398,  172,  173,
      172,  173,  237,  235,   60,   60,  236,  159,  159,  159,

      241,  244,  242,  245,  235,  235,  175,  246,  247,  235,
      404,  177,  235,  235,  235,  183,  715,  179,  207,  176,
      185,  184,  208,   61,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   62,   62,   62,   71,   72,   73,
       74,   75,   76,   77,   25,   78,   79,   80,   81,   82,
       79,   83,   79,   84,   85,   86,   87,   79,   79,   88,
       89,   90,   91,   79,   92,   93,   94,   95,   96,   79,
       97,   98,   79,   99,  100,  101,  102,  103,   79,  104,
      105,   79,  106,   79,  107,   79,   79,   79,  108,  109,
      110,  111,  112,   12,  112,  113,  114,  115,  116,  117,

      111,  111,  111,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  127,  131,  127,  132,
      133,  134,  135,  127,  127,  136,  137,  138,  139,  127,
      140,  141,  142,  143,  144,  127,  145,  146,  127,  147,
      148,  149,  150,  151,  127,  152,  153,  127,  154,  127,
      155,  127,  127,  127,  156,  157,  158,  172,  173,  172,
      173,  172,  173,  172,  173,  172,  173,  161,  172,  173,
      297,  172,  173, 1113,  172,  173,  172,  173,  172,  173,
      172,  173,  172,  173,  172,  173,  257,  180, 1114,  172,
      173,  172,  173,  172,  173,  289,  190,  290,  172,  173,

      258,  181,  196,  192,  267,  178,  187,  193,  188,  182,
      191,  189,  198,  194,  195,  279,  197,  202,  268,  199,
      172,  173,  200,  280,  201,  203,  204,  172,  173,  161,
      161,  209,  239,  248,  235,  264,  205,  265,  206,  212,
      266,  213,  286,  269,  273,  284,  240,  270,  235,  285,
      294,  315,  294,  271,  303,  304,  214,  322,  274,  323,
      325,  337,  324,  327,  331,  316,  342,  328,  398,  338,
      343,  172,  173,  329,  326,  210,  172,  173,  332,  211,
      217,  218,  347,  159,  348,  159,  287,  172,  173,  398,
      288,  344,  351,  292,  352,  172,  173,  398,  353,  172,

      173,  172,  173,  410,  172,  173,  172,  173,  434,  354,
      172,  173,  220,  172,  173, 1115,  221,  435,  222,  223,
      224,  172,  173,  225,  412,  226,  227,  228,  355,  356,
      398,  229,  230,  231,  357,  345,  362,  359,  406,  346,
      232,  398,  233,  234,  234,  358,  361,  234,  234,  234,
      234,  234,  249,  250,  234,  234,  234,  234,  368,  234,
      234,  234,  235,  172,  173,  172,  173,  360,  172,  173,
      172,  173,  172,  173,  172,  173,  172,  173,  234,  162,
      403,  172,  173,  172,  173,  252,  716,  172,  173,  172,
      173,  172,  173,  415,  172,  173,  365, 1116,  371,  172,

      173,  172,  173,  363,  374,  372,  234,  234,  234,  234,
      234,  364,  375,  234,  234,  234,  234,  234,  249,  250,
      234,  234,  234,  234,  366,  234,  234,  234,  235,  367,
      369,  373,  376, 1117,  377,  172,  173,  172,  173,  370,
      378,  172,  173,  379,  234,  172,  173,  445,  380,  446,
      381,  172,  173,  172,  173,  172,  173,  172,  173,  172,
      173, 1118,  172,  173,  172,  173,  172,  173,  398,  398,
      398,  382,  234,  234,  234,  234,  234,  395,  385,  234,
      234,  234,  234,  234,  249,  234,  234,  234,  234,  234,
      389,  234,  234,  234,  235,  383,  400,  387,  388,  394,

      386,  405,  384,  439,  401,  398,  443,  396,  390,  444,
      234,  440,  249,  397,  413,  236,  402,  159,  161,  161,
      244,  239,  235,  457,  235,  454,  235,  172,  173,  294,
      492,  294,  493,  235,  398,  240,  411,  458,  234,  234,
      234,  293,  293,  455,  293,  293,  293,  293,  293,  293,
      307,  308,  293,  293,  293,  293,  392,  293,  293,  293,
      293,  407,  501,  456,  161,  408,  235,  297,  172,  173,
      393,  463,  416,  464,  417,  409,  293,  465,  418,  481,
      502,  486,  490,  310,  504,  491,  172,  173,  482,  487,
     1119,  172,  173,  172,  173,  172,  173,  557,  505,  558,

      518,  172,  173,  559,  293,  293,  293,  293,  293,  398,
      293,  293,  293,  293,  293,  293,  307,  308,  293,  293,
      293,  293,  513,  293,  293,  293,  293,  514,  172,  173,
      172,  173,  172,  173,  517,  516,  172,  173,  172,  173,
      515,  235,  293,  172,  173, 1123,  519,  172,  173,  567,
      172,  173,  172,  173,  398,  172,  173, 1124,  172,  173,
      521,  172,  173,  576,  520,  172,  173,  172,  173,  398,
      293,  293,  293,  293,  293,  523,  293,  293,  293,  293,
      293,  293,  307,  293,  293,  293,  293,  293,  525,  293,
      293,  293,  293,  524,  522,  527,  560,  526,  529,  528,

      530,  172,  173,  172,  173,  172,  173,  534,  293,  172,
      173,  562,  172,  173,  172,  173,  172,  173,  616, 1125,
      617,  172,  173,  172,  173,  398,  172,  173,  172,  173,
      398,  532,  398,  536,  531,  398,  293,  293,  293,  234,
      234,  538,  547,  234,  234,  234,  234,  234,  249,  234,
      234,  234,  234,  234,  533,  234,  234,  234,  235,  535,
      539,  172,  173,  537,  541,  172,  173,  172,  173,  561,
      563,  172,  173,  548,  234,  975,  564,  613,  172,  173,
      172,  173, 1126,  235,  172,  173,  172,  173,  172,  173,
      172,  173,  398,  540,  398,  172,  173,  542,  172,  173,

      398,  546,  234,  234,  234,  293,  293,  543,  293,  293,
      293,  293,  293,  293,  307,  293,  293,  293,  293,  293,
      544,  293,  293,  293,  293,  545,  550,  551,  172,  173,
      555,  398,  554,  398,  398,  565,  172,  173,  569,  398,
      293,  235,  235,  568,  398,  578,  625,  663,  398,  664,
      172,  173,  172,  173,  721,  552,  398,  553,  579,  626,
      172,  173,  235,  570,  172,  173,  566,  571,  293,  293,
      293,  556,  573,  574,  172,  173,  398,  572,  719,  575,
      172,  173,  672,  717,  172,  173,  172,  173,  172,  173,
      852,  671,  673,  172,  173,  172,  173,  172,  173,  172,

      173,  398,  675,  679,  172,  173,  172,  173,  172,  173,
      172,  173,  674,  398,  172,  173,  718,  172,  173,  172,
      173,  855,  172,  173,  678,  172,  173,  172,  173,  235,
      676,  677,  680,  172,  173,  683,  235,  681,  684,  853,
      688,  398,  682,  172,  173,  685,  690,  720,  686,  689,
      693,  172,  173,  172,  173, 1127,  687,  691,  172,  173,
      172,  173,  172,  173,  694, 1128,  692,  172,  173,  172,
      173,  172,  173,  722,  695,  172,  173,  172,  173,  172,
      173,  172,  173,  172,  173,  172,  173,  854,  696,  172,
      173,  172,  173,  235,  738,  741,  697,  739,  785,  701,

      699,  702,  700,  698,  742,  782,  703,  786,  783,  705,
      172,  173, 1129,  707,  172,  173,  172,  173,  172,  173,
      704,  172,  173,  856,  706,  708,  709,  711,  398,  812,
      723,  235,  172,  173,  710,  172,  173,  172,  173,  172,
      173, 1130,  811,  172,  173,  172,  173,  172,  173,  172,
      173,  398,  818,  172,  173,  977,  172,  173,  172,  173,
     1131,  814,  172,  173,  172,  173,  815,  813,  816,  172,
      173,  817,  172,  173, 1132,  820,  172,  173,  172,  173,
     1135,  823,  172,  173,  978,  824,  979,  819,  825,  976,
      172,  173,  172,  173,  822, 1136,  821,  172,  173,  172,

      173,  172,  173, 1137,  826,  827,  828,  172,  173,  993,
      172,  173,  994,  830,  829,  831, 1096,  172,  173,  172,
      173,  172,  173, 1097,  832,  172,  173, 1138,  833,  834,
      172,  173,  172,  173,  837,  172,  173,  838,  172,  173,
      172,  173,  985,  835,  986,  836,  839,  840, 1139,  841,
      172,  173, 1140,  172,  173,  172,  173,  172,  173,  172,
      173,  842,  172,  173,  172,  173,  172,  173,  935, 1016,
      936, 1017,  172,  173, 1141,  172,  173,  843,  844,  846,
      847,  172,  173,  172,  173,  938,  845,  939,  942, 1031,
      943,  848, 1032,  940,  172,  173,  172,  173,  941,  172,

      173,  172,  173,  172,  173,  937,  172,  173,  944,  948,
      172,  173, 1142,  945,  946,  172,  173,  172,  173,  949,
      947,  172,  173,  950,  172,  173,  951,  952,  172,  173,
      172,  173,  172,  173,  172,  173,  957, 1143,  955,  172,
      173, 1133,  953,  954,  172,  173,  172,  173, 1134,  956,
      172,  173, 1144,  958,  172,  173,  959,  172,  173,  172,
      173, 1145,  172,  173,  172,  173,  960,  172,  173,  172,
      173,  961, 1146,  962,  172,  173, 1147,  172,  173,  981,
     1019,  982, 1020, 1023, 1148, 1024,  966,  983, 1021,  967,
      172,  173,  172,  173, 1149,  970,  969,  172,  173,  963,

      398,  965, 1150,  964,  968,  971,  972,  172,  173,  172,
      173,  172,  173,  172,  173, 1151,  172,  173,  172,  173,
      172,  173,  172,  173,  172,  173,  172,  173,  172,  173,
      172,  173, 1054,  172,  173, 1152, 1056,  172,  173, 1153,
     1055, 1154, 1057, 1060, 1092, 1061,  172,  173, 1155, 1058,
      172,  173, 1064, 1156, 1065,  172,  173, 1059, 1062,  172,
      173,  172,  173, 1066, 1161, 1067, 1063,  172,  173, 1162,
     1069,  172,  173, 1072, 1070, 1163, 1068,  172,  173,  172,
      173,  172,  173,  172,  173, 1071, 1164, 1073,  172,  173,
      172,  173, 1165, 1074, 1081,  172,  173,  172,  173, 1075,

      172,  173,  172,  173,  172,  173,  172,  173, 1166, 1077,
     1167, 1082, 1076,  172,  173,  172,  173, 1212, 1083, 1213,
     1079, 1081, 1080, 1157, 1214, 1078,  398, 1084,  172,  173,
      172,  173,  172,  173, 1085, 1087,  172,  173, 1120, 1215,
     1158,  172,  173, 1090, 1086, 1121, 1089, 1159,  172,  173,
     1216, 1088,  172,  173, 1122, 1217, 1160, 1091,  172,  173,
      172,  173,  172,  173,  172,  173,  172,  173, 1168, 1169,
     1211, 1170, 1198, 1171,  172,  173, 1172, 1178, 1218, 1179,
      172,  173,  172,  173,  172,  173, 1199, 1173, 1219, 1175,
      172,  173,  172,  173, 1220, 1174,  172,  173,  172,  173,

     1176, 1177, 1221,  172,  173,  172,  173,  172,  173,  172,
      173, 1222, 1182, 1180,  172,  173,  172,  173, 1223, 1192,
     1224, 1181, 1225,  172,  173, 1185, 1195,  172,  173,  172,
      173,  172,  173, 1184, 1187, 1226, 1183, 1189, 1227, 1186,
      172,  173,  172,  173, 1188,  172,  173, 1193,  172,  173,
      172,  173,  172,  173, 1196, 1228, 1190,  172,  173, 1202,
     1229, 1194, 1191, 1230, 1231, 1232, 1233, 1234, 1197, 1235,
     1201, 1205, 1204, 1203, 1236, 1239, 1242, 1200, 1206, 1243,
     1244, 1246, 1247, 1250, 1207, 1251, 1252, 1208, 1253, 1248,
     1254, 1209, 1255, 1256, 1245, 1249, 1257, 1258, 1259, 1260,

     1210, 1261, 1237, 1240, 1262, 1263, 1264, 1265, 1266, 1267,
     1268, 1269, 1270, 1271, 1272, 1273, 1238, 1241, 1274, 1275,
     1276, 1277, 1280, 1283, 1285, 1286, 1287, 1289, 1290, 1293,
     1294, 1295,  172,  173, 1319, 1291, 1327, 1284,  172,  173,
     1288, 1292,  172,  173,  172,  173,  172,  173, 1320, 1278,
     1281,  172,  173,  172,  173,  172,  173,  172,  173,  172,
      173, 1296, 1323, 1279, 1282,  172,  173, 1328, 1302,  172,
      173,  172,  173, 1342, 1298, 1299, 1324, 1297,  172,  173,
      172,  173,  172,  173,  172,  173, 1303,  172,  173, 1343,
     1300,  172,  173, 1344, 1305, 1345,  172,  173, 1301, 1313,

      172,  173,  172,  173, 1304,  172,  173,  172,  173, 1346,
     1309, 1306,  172,  173,  172,  173, 1347, 1307,  172,  173,
     1348,  172,  173, 1314,  172,  173, 1349, 1308,  398, 1315,
     1310,  172,  173, 1350, 1316,  172,  173, 1351, 1312, 1311,
     1333, 1317, 1322,  172,  173, 1352,  172,  173, 1318, 1326,
      172,  173, 1329, 1330, 1321,  172,  173,  172,  173, 1353,
     1325,  172,  173, 1354,  172,  173,  172,  173, 1355, 1341,
     1356, 1357, 1358, 1362, 1359, 1363, 1364, 1367,  235, 1368,
      235, 1371, 1372, 1335, 1332, 1331, 1373, 1374, 1336, 1375,
     1376, 1333, 1334, 1377, 1338, 1378, 1379, 1381, 1360, 1365,

     1382, 1369, 1337, 1339, 1361, 1383, 1384, 1340, 1385, 1386,
     1380, 1387, 1388, 1366, 1389, 1370, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1404, 1405,
     1406, 1407, 1409, 1410, 1411, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1408, 1423, 1424, 1412, 1426,
     1427, 1402, 1428,  172,  173,  172,  173, 1403,  172,  173,
     1440, 1425,  172,  173,  172,  173, 1445,  172,  173,  172,
      173,  172,  173,  172,  173, 1446,  172,  173,  172,  173,
      172,  173,  172,  173,  172,  173, 1449,  172,  173, 1429,
      172,  173,  172,  173,  172,  173, 1430, 1450, 1431, 1432,

      172,  173,  172,  173,  172,  173, 1453, 1434, 1435,  172,
      173, 1433,  172,  173, 1437, 1439,  172,  173, 1436,  172,
      173,  172,  173, 1454,  172,  173, 1459, 1441, 1442,  172,
      173, 1438,  172,  173,  172,  173, 1467,  172,  173,  398,
     1444,  172,  173,  172,  173, 1468, 1443,  172,  173,  172,
      173, 1469, 1447, 1470,  172,  173, 1471, 1448, 1472, 1451,
     1457, 1458, 1452,  172,  173, 1473, 1474, 1475, 1476, 1477,
      235, 1479, 1480, 1481, 1482, 1463, 1455, 1460,  235,  235,
     1485, 1456, 1461, 1486,  235, 1462, 1464,  235, 1466, 1489,
     1490, 1491, 1492, 1478, 1465, 1493, 1494, 1484, 1495, 1496,

     1497, 1498, 1499, 1500, 1501, 1488, 1502, 1503, 1504, 1505,
     1483, 1506, 1507, 1508, 1509, 1510, 1487, 1511, 1512, 1513,
     1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
     1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
     1534, 1535, 1536, 1537,  172,  173,  172,  173,  172,  173,
      172,  173,  172,  173,  172,  173,  172,  173,  172,  173,
      172,  173,  172,  173,  172,  173, 1547,  172,  173,  172,
      173, 1551,  172,  173,  172,  173, 1552,  172,  173, 1555,
      172,  173, 1556,  172,  173, 1538, 1543, 1544, 1559, 1539,
      172,  173, 1560, 1541, 1565, 1542, 1540, 1548, 1545,  172,

      173,  172,  173,  172,  173, 1553,  172,  173,  172,  173,
      398, 1546, 1549, 1550, 1554,  172,  173, 1558, 1557,  172,
      173, 1561,  172,  173,  172,  173,  172,  173, 1570, 1571,
     1572, 1573, 1574, 1575, 1576, 1577, 1566, 1578,  235, 1580,
     1581, 1562, 1582,  235,  235, 1585, 1586,  235,  235, 1567,
     1589, 1590, 1564, 1591, 1592, 1563, 1579, 1593, 1594, 1568,
     1595, 1596, 1597, 1569, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1583, 1607, 1584, 1608, 1587, 1609, 1588,
     1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,

     1630,  172,  173,  172,  173,  172,  173,  172,  173, 1640,
      172,  173,  172,  173, 1643,  172,  173,  172,  173,  172,
      173,  172,  173,  172,  173,  172,  173, 1644, 1647, 1631,
     1648, 1632,  172,  173, 1651,  172,  173, 1633, 1635,  172,
      173,  172,  173, 1652,  172,  173, 1661,  172,  173, 1662,
     1636, 1637,  172,  173, 1663, 1639, 1634,  172,  173,  172,
      173, 1642, 1664, 1638,  172,  173, 1641, 1646, 1645,  172,
      173,  172,  173, 1650, 1665, 1649, 1654, 1666, 1667, 1655,
     1668, 1669,  235, 1671, 1672,  235,  235, 1675, 1676,  235,
      235, 1679, 1659, 1680, 1681, 1657, 1653, 1682, 1683, 1684,

     1685, 1658, 1686, 1673, 1687, 1660, 1688, 1677, 1689, 1656,
     1674, 1690, 1691, 1692, 1678, 1693, 1694, 1670, 1695, 1696,
     1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
     1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
     1717, 1718,  172,  173,  172,  173,  172,  173,  172,  173,
      172,  173,  172,  173,  172,  173, 1727,  172,  173,  172,
      173,  172,  173, 1730,  172,  173, 1731,  172,  173,  172,
      173, 1733, 1734,  172,  173,  172,  173, 1736, 1737, 1745,
     1722,  172,  173,  172,  173,  172,  173, 1721, 1746, 1719,
     1725, 1720, 1729,  172,  173, 1724, 1747, 1723, 1748, 1728,

      172,  173,  172,  173, 1749, 1726,  172,  173, 1732, 1750,
     1751,  172,  173, 1752, 1735, 1754,  235, 1755,  235,  235,
     1758, 1738,  235, 1761,  235, 1739, 1762, 1763, 1764, 1765,
     1766, 1740, 1767, 1741, 1768, 1769, 1770, 1771, 1772, 1773,
     1757, 1742, 1743, 1744, 1753, 1756, 1760, 1774, 1759, 1775,
     1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,  172,
      173,  172,  173,  172,  173,  172,  173,  172,  173, 1803,
      172,  173,  172,  173,  172,  173,  172,  173,  172,  173,
     1806,  172,  173, 1807,  172,  173, 1808, 1809,  172,  173,

      172,  173,  172,  173, 1815, 1795, 1816, 1796, 1800,  172,
      173,  172,  173, 1799, 1804,  172,  173, 1802, 1801, 1817,
     1797,  172,  173, 1818, 1819, 1820, 1798, 1810, 1821, 1822,
      235, 1824, 1825,  235, 1805,  235,  235,  235, 1813, 1811,
     1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1823, 1836,
     1837, 1838, 1839, 1840, 1812, 1841, 1814, 1842, 1843, 1844,
     1845, 1846, 1847, 1848, 1826, 1849, 1850, 1827, 1851, 1852,
      172,  173,  172,  173,  172,  173,  172,  173,  172,  173,
      172,  173,  172,  173, 1861,  172,  173,  172,  173,  172,
      173, 1856, 1863, 1864,  172,  173,  172,  173,  172,  173,

      172,  173, 1855,  172,  173, 1869, 1870, 1871, 1872, 1873,
     1859, 1874, 1853, 1875, 1854, 1876,  235, 1878,  235,  235,
     1857, 1860, 1879, 1880, 1881, 1882, 1883, 1858, 1884, 1885,
     1886, 1887, 1888, 1862, 1889, 1890, 1865, 1891, 1867, 1892,
     1893, 1894, 1866, 1895, 1896, 1868, 1897, 1898,  172,  173,
      172,  173, 1877,  172,  173,  172,  173,  172,  173,  172,
      173,  172,  173, 1907,  172,  173,  172,  173, 1908,  172,
      173,  172,  173,  172,  173,  172,  173, 1912, 1913, 1914,
     1915, 1916, 1917, 1918, 1919,  235, 1920, 1921, 1922, 1899,
     1905, 1900, 1906, 1923, 1924, 1904, 1925, 1926, 1903, 1927,

     1901, 1928, 1910, 1902, 1929, 1930, 1931, 1932, 1909, 1933,
     1934, 1935,  172,  173, 1911,  172,  173,  172,  173,  172,
      173,  172,  173,  172,  173,  172,  173,  172,  173, 1941,
     1942,  172,  173,  172,  173,  172,  173, 1946, 1947, 1948,
     1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
     1959, 1960, 1961, 1936, 1962, 1963, 1940, 1969, 1937,  172,
      173,  172,  173, 1971, 1939, 1938,  172,  173,  172,  173,
      172,  173,  172,  173, 1972, 1944, 1973, 1943,  172,  173,
     1974, 1945,  172,  173, 1975, 1976, 1977, 1978, 1979, 1980,
     1981, 1982, 1983,  172,  173,  172,  173,  172,  173, 1986,

     1965, 1964, 1967,  172,  173,  172,  173, 1966,  172,  173,
     1988, 1968, 1989, 1990, 1991, 1992, 1993, 1970, 1994,  172,
      173,  172,  173,  172,  173, 1112, 1111, 1110, 1109, 1108,
     1107, 1106, 1105, 1104, 1984, 1103, 1102, 1985, 1101, 1100,
     1099, 1098, 1095, 1094, 1093,  398,  398, 1053, 1052, 1051,
     1050, 1049, 1048, 1047, 1987,  161,  161,  161,  161,  161,
      161,  161,  161,  174,  174,  174,  174,  186, 1046,  186,
      186,  219,  219, 1045, 1044, 1043,  219,  234, 1042, 1041,
      234,  234,  234,  234,  234,  238,  238,  238,  238,  238,
      238,  238,  238,  251, 1040, 1039,  251,  251,  251,  251,

      251,  263, 1038, 1037,  263,  263,  263,  263,  263,  293,
     1036,  293,  293,  293,  293,  293,  293,  296,  296,  296,
      296,  296,  296,  296,  296,  309, 1035,  309,  309,  309,
      309,  309,  309,  321, 1034,  321,  321,  321,  321,  321,
      321,  399,  399,  399, 1033, 1030, 1029, 1028, 1027, 1026,
     1025, 1022, 1018, 1015, 1014, 1013, 1012, 1011, 1010, 1009,
     1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000,  999,
      998,  997,  996,  995,  992,  991,  990,  989,  988,  987,
      984,  980,  235,  235,  974,  973,  934,  933,  932,  931,
      930,  929,  928,  927,  926,  925,  924,  923,  922,  921,

      920,  919,  918,  917,  916,  915,  914,  913,  912,  911,
      910,  909,  908,  907,  906,  905,  904,  903,  902,  901,
      900,  899,  898,  897,  896,  895,  894,  893,  892,  891,
      890,  889,  888,  887,  886,  885,  884,  883,  882,  881,
      880,  879,  878,  877,  876,  875,  874,  873,  872,  871,
      870,  869,  868,  867,  866,  865,  864,  863,  862,  861,
      860,  859,  858,  857,  235,  398,  398,  398,  851,  850,
      849,  810,  809,  808,  807,  806,  805,  804,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  793,  792,
      791,  790,  789,  788,  787,  784,  781,  780,  779,  778,

      777,  776,  775,  774,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      235,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  744,  743,  740,  737,  736,  735,
      734,  733,  732,  731,  730,  729,  728,  727,  726,  725,
      724,  398,  398,  398,  398,  398,  398,  398,  398,  714,
      713,  712,  670,  669,  668,  667,  666,  665,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,

      630,  629,  628,  627,  624,  623,  622,  621,  620,  619,
      618,  615,  614,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  577,  162,  398,  398,
      549,  512,  511,  510,  509,  508,  507,  506,  503,  500,
      499,  498,  497,  496,  495,  494,  489,  488,  485,  484,
      483,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  307,  301,  235,  462,
      461,  460,  459,  453,  452,  451,  450,  449,  448,  447,

      442,  441,  438,  437,  436,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      235,  235,  235,  235,  414,  235,  235,  235,  235,  414,
      235,  398,  398,  391,  172,  172,  166,  162,  350,  349,
      341,  340,  339,  336,  335,  334,  333,  330,  320,  319,
      318,  317,  314,  313,  312,  311,  306,  305,  302,  301,
      300,  299,  298,  295,  235,  235,  291,  283,  282,  281,
      278,  277,  276,  275,  272,  235,  262,  261,  260,  259,
      256,  255,  254,  253,  235,  235,  243,  235,  235,  215,
      216,  215,  172,  171,  170,  167,  166,  165,  164,  163,

      162,  160, 1995,    9, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995
    } ;

static yyconst flex_int16_t yy_chk[3571] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,   11,  223,
       11,   23,   23,   26,   26,   27,   27,   28,   28,   29,
       29,   31,   31,   34,   34,   35,   35,  561,   36,   36,
       52,   52,   66,   66,    3,    4,   63,   65,   63,   65,

       69,   74,   70,   75,   75,   74,   26,   76,   76,   76,
      223,   29,   69,   70,   63,   34,  561,   31,   52,   28,
       36,   35,   52,    3,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   30,   30,   32,
       32,   33,   33,   42,   42,   39,   39,  114,   40,   40,
      114,   41,   41,  999,   43,   43,   44,   44,   45,   45,
       46,   46,   47,   47,   49,   49,   84,   32, 1000,   48,
       48,   50,   50,   51,   51,  106,   40,  106,   54,   54,

       84,   32,   43,   41,   92,   30,   39,   41,   39,   33,
       40,   39,   44,   41,   42,  100,   43,   48,   92,   45,
       55,   55,   46,  100,   47,   48,   49,   53,   53,   67,
       67,   53,   67,   77,   77,   91,   50,   91,   51,   54,
       91,   54,  105,   93,   95,  104,   67,   93,  109,  104,
      112,  132,  112,   93,  123,  123,   55,  139,   95,  139,
      140,  148,  139,  141,  143,  132,  152,  141,  227,  148,
      152,  174,  174,  141,  140,   53,  175,  175,  143,   53,
       60,   60,  154,  159,  154,  159,  105,  176,  176,  229,
      105,  153,  173,  109,  173,  178,  178,  225,  173,  177,

      177,  180,  180,  227,  179,  179,  183,  183,  268,  175,
      182,  182,   60,  190,  190, 1001,   60,  268,   60,   60,
       60,  181,  181,   60,  229,   60,   60,   60,  176,  177,
      222,   60,   60,   60,  178,  153,  183,  180,  225,  153,
       60,  563,   60,   78,   78,  179,  182,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,  190,   78,
       78,   78,   78,  184,  184,  187,  187,  181,  192,  192,
      185,  185,  193,  193,  205,  205,  195,  195,   78,  240,
      222,  188,  188,  189,  189,   78,  563,  196,  196,  197,
      197,  194,  194,  240,  198,  198,  187, 1003,  192,  191,

      191,  199,  199,  184,  195,  193,   78,   78,   78,   79,
       79,  185,  195,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,  188,   79,   79,   79,   79,  189,
      191,  194,  196, 1005,  197,  200,  200,  203,  203,  191,
      198,  212,  212,  198,   79,  201,  201,  276,  199,  276,
      199,  202,  202,  204,  204,  206,  206,  207,  207,  211,
      211, 1006,  208,  208,  213,  213,  214,  214,  230,  221,
      224,  200,   79,   79,   79,   90,   90,  212,  203,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
      208,   90,   90,   90,   90,  201,  221,  206,  207,  211,

      204,  224,  202,  272,  221,  228,  275,  213,  208,  275,
       90,  272,  249,  214,  230,  236,  221,  236,  238,  238,
      244,  238,  249,  287,  244,  285,  286,  210,  210,  294,
      334,  294,  334,  236,  226,  238,  228,  287,   90,   90,
       90,  126,  126,  285,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  210,  126,  126,  126,
      126,  226,  343,  286,  296,  226,  250,  296,  358,  358,
      210,  308,  250,  308,  250,  226,  126,  308,  250,  326,
      343,  330,  333,  126,  345,  333,  354,  354,  326,  330,
     1007,  355,  355,  356,  356,  357,  357,  398,  345,  398,

      358,  359,  359,  398,  126,  126,  126,  127,  127,  407,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  354,  127,  127,  127,  127,  355,  360,  360,
      361,  361,  363,  363,  357,  356,  365,  365,  386,  386,
      355,  418,  127,  366,  366, 1009,  359,  362,  362,  407,
      368,  368,  364,  364,  400,  370,  370, 1010,  371,  371,
      361,  375,  375,  418,  360,  367,  367,  369,  369,  402,
      127,  127,  127,  138,  138,  363,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  366,  138,
      138,  138,  138,  364,  362,  368,  400,  367,  370,  369,

      371,  372,  372,  373,  373,  377,  377,  375,  138,  379,
      379,  402,  389,  389,  374,  374,  378,  378,  459, 1011,
      459,  376,  376,  382,  382,  401,  390,  390,  380,  380,
      852,  373,  404,  377,  372,  403,  138,  138,  138,  263,
      263,  379,  389,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  374,  263,  263,  263,  263,  376,
      380,  381,  381,  378,  382,  383,  383,  388,  388,  401,
      403,  384,  384,  390,  263,  852,  404,  456,  517,  517,
      392,  392, 1012,  456,  385,  385,  524,  524,  387,  387,
      395,  395,  405,  381,  409,  393,  393,  383,  396,  396,

      408,  388,  263,  263,  263,  321,  321,  384,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      385,  321,  321,  321,  321,  387,  392,  393,  394,  394,
      396,  406,  395,  410,  411,  405,  397,  397,  409,  412,
      321,  417,  416,  408,  716,  420,  467,  506,  567,  506,
      513,  513,  514,  514,  574,  394,  564,  394,  420,  467,
      515,  515,  574,  410,  516,  516,  406,  411,  321,  321,
      321,  397,  412,  416,  518,  518,  566,  411,  567,  417,
      519,  519,  514,  564,  520,  520,  521,  521,  522,  522,
      716,  513,  515,  523,  523,  525,  525,  526,  526,  527,

      527,  717,  518,  522,  528,  528,  529,  529,  530,  530,
      532,  532,  516,  573,  533,  533,  566,  531,  531,  534,
      534,  722,  535,  535,  521,  536,  536,  537,  537,  722,
      519,  520,  523,  538,  538,  527,  575,  525,  528,  717,
      531,  720,  526,  539,  539,  529,  532,  573,  529,  531,
      535,  540,  540,  541,  541, 1013,  530,  533,  542,  542,
      543,  543,  544,  544,  536, 1014,  534,  545,  545,  546,
      546,  547,  547,  575,  538,  548,  548,  550,  550,  551,
      551,  552,  552,  553,  553,  554,  554,  720,  539,  555,
      555,  556,  556,  576,  593,  595,  540,  593,  642,  545,

      543,  546,  544,  542,  595,  640,  547,  642,  640,  550,
      671,  671, 1015,  552,  672,  672,  673,  673,  674,  674,
      548,  675,  675,  723,  551,  553,  554,  556,  854,  672,
      576,  723,  676,  676,  555,  677,  677,  678,  678,  679,
      679, 1016,  671,  680,  680,  681,  681,  682,  682,  683,
      683,  853,  678,  684,  684,  854,  685,  685,  686,  686,
     1017,  674,  687,  687,  688,  688,  675,  673,  676,  689,
      689,  677,  690,  690, 1018,  680,  691,  691,  692,  692,
     1020,  683,  693,  693,  857,  684,  857,  679,  685,  853,
      694,  694,  695,  695,  682, 1021,  681,  696,  696,  697,

      697,  699,  699, 1022,  686,  687,  688,  698,  698,  868,
      700,  700,  868,  690,  689,  691,  981,  701,  701,  702,
      702,  703,  703,  981,  692,  704,  704, 1023,  693,  694,
      705,  705,  706,  706,  698,  707,  707,  699,  709,  709,
      708,  708,  861,  696,  861,  697,  700,  701, 1024,  703,
      711,  711, 1025,  710,  710,  811,  811,  812,  812,  814,
      814,  704,  816,  816,  817,  817,  818,  818,  811,  897,
      811,  897,  813,  813, 1026,  815,  815,  705,  706,  708,
      710,  819,  819,  821,  821,  813,  707,  813,  815,  908,
      815,  711,  908,  813,  820,  820,  823,  823,  814,  822,

      822,  824,  824,  825,  825,  812,  826,  826,  816,  820,
      827,  827, 1027,  817,  818,  828,  828,  830,  830,  821,
      819,  829,  829,  822,  831,  831,  822,  823,  832,  832,
      833,  833,  834,  834,  835,  835,  828, 1028,  826,  836,
      836, 1019,  824,  825,  837,  837,  838,  838, 1019,  827,
      839,  839, 1029,  829,  840,  840,  831,  841,  841,  842,
      842, 1030,  843,  843,  844,  844,  835,  845,  845,  846,
      846,  836, 1031,  837,  848,  848, 1032,  847,  847,  859,
      899,  859,  899,  901, 1033,  901,  841,  859,  899,  842,
      935,  935,  936,  936, 1035,  845,  844,  937,  937,  838,

      977,  840, 1037,  839,  843,  846,  847,  938,  938,  939,
      939,  940,  940,  941,  941, 1038,  942,  942,  943,  943,
      944,  944,  945,  945,  946,  946,  947,  947,  948,  948,
      949,  949,  935,  950,  950, 1039,  937,  951,  951, 1041,
      936, 1043,  938,  940,  977,  941,  952,  952, 1044,  938,
      953,  953,  944, 1045,  945,  954,  954,  939,  942,  955,
      955,  956,  956,  946, 1047,  947,  943,  957,  957, 1048,
      949,  958,  958,  952,  950, 1049,  948,  959,  959,  960,
      960,  961,  961,  962,  962,  951, 1050,  954,  963,  963,
      964,  964, 1051,  956,  965,  966,  966,  967,  967,  957,

      965,  965,  968,  968,  969,  969,  970,  970, 1052,  960,
     1053,  965,  958,  971,  971,  972,  972, 1093,  965, 1094,
      963, 1008,  964, 1046, 1095,  962, 1092,  965, 1054, 1054,
     1055, 1055, 1056, 1056,  966,  968, 1058, 1058, 1008, 1096,
     1046, 1057, 1057,  971,  967, 1008,  970, 1046, 1059, 1059,
     1097,  969, 1060, 1060, 1008, 1098, 1046,  972, 1061, 1061,
     1062, 1062, 1063, 1063, 1064, 1064, 1065, 1065, 1054, 1055,
     1092, 1056, 1081, 1057, 1066, 1066, 1058, 1064, 1099, 1065,
     1067, 1067, 1068, 1068, 1069, 1069, 1081, 1059, 1100, 1061,
     1070, 1070, 1071, 1071, 1101, 1060, 1072, 1072, 1073, 1073,

     1062, 1063, 1102, 1074, 1074, 1075, 1075, 1076, 1076, 1077,
     1077, 1103, 1069, 1066, 1078, 1078, 1079, 1079, 1104, 1079,
     1105, 1068, 1107, 1080, 1080, 1072, 1080, 1082, 1082, 1083,
     1083, 1084, 1084, 1071, 1074, 1108, 1070, 1076, 1109, 1073,
     1085, 1085, 1087, 1087, 1075, 1088, 1088, 1079, 1089, 1089,
     1090, 1090, 1091, 1091, 1080, 1110, 1077, 1086, 1086, 1084,
     1111, 1079, 1078, 1112, 1113, 1114, 1115, 1116, 1080, 1117,
     1083, 1086, 1085, 1084, 1118, 1119, 1120, 1082, 1086, 1121,
     1122, 1123, 1124, 1126, 1086, 1127, 1129, 1088, 1130, 1124,
     1131, 1089, 1132, 1133, 1122, 1124, 1134, 1135, 1136, 1137,

     1091, 1138, 1118, 1119, 1139, 1140, 1141, 1142, 1144, 1145,
     1146, 1147, 1148, 1149, 1150, 1151, 1118, 1119, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164,
     1165, 1167, 1168, 1168, 1192, 1162, 1198, 1157, 1169, 1169,
     1160, 1162, 1170, 1170, 1171, 1171, 1172, 1172, 1192, 1155,
     1156, 1173, 1173, 1174, 1174, 1175, 1175, 1176, 1176, 1178,
     1178, 1168, 1195, 1155, 1156, 1177, 1177, 1199, 1175, 1179,
     1179, 1180, 1180, 1212, 1171, 1172, 1195, 1169, 1181, 1181,
     1182, 1182, 1183, 1183, 1184, 1184, 1176, 1185, 1185, 1213,
     1173, 1186, 1186, 1215, 1178, 1216, 1187, 1187, 1174, 1187,

     1188, 1188, 1189, 1189, 1177, 1190, 1190, 1191, 1191, 1217,
     1183, 1179, 1193, 1193, 1194, 1194, 1218, 1181, 1196, 1196,
     1219, 1197, 1197, 1187, 1200, 1200, 1220, 1182, 1211, 1187,
     1184, 1201, 1201, 1221, 1189, 1202, 1202, 1222, 1186, 1185,
     1204, 1190, 1194, 1203, 1203, 1223, 1204, 1204, 1191, 1197,
     1205, 1205, 1200, 1201, 1193, 1206, 1206, 1207, 1207, 1225,
     1196, 1208, 1208, 1226, 1209, 1209, 1210, 1210, 1227, 1211,
     1228, 1229, 1230, 1233, 1231, 1234, 1235, 1237, 1236, 1238,
     1239, 1240, 1241, 1206, 1203, 1202, 1242, 1243, 1207, 1244,
     1245, 1246, 1205, 1247, 1208, 1248, 1249, 1250, 1231, 1236,

     1251, 1239, 1207, 1209, 1231, 1252, 1253, 1210, 1254, 1256,
     1249, 1257, 1258, 1236, 1259, 1239, 1260, 1261, 1262, 1263,
     1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275,
     1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1277, 1291, 1292, 1280, 1293,
     1294, 1272, 1295, 1296, 1296, 1297, 1297, 1272, 1298, 1298,
     1313, 1292, 1299, 1299, 1300, 1300, 1319, 1301, 1301, 1302,
     1302, 1303, 1303, 1304, 1304, 1320, 1305, 1305, 1306, 1306,
     1307, 1307, 1308, 1308, 1309, 1309, 1323, 1310, 1310, 1296,
     1311, 1311, 1312, 1312, 1314, 1314, 1298, 1324, 1299, 1301,

     1315, 1315, 1316, 1316, 1317, 1317, 1327, 1303, 1305, 1318,
     1318, 1302, 1321, 1321, 1308, 1310, 1322, 1322, 1306, 1325,
     1325, 1326, 1326, 1328, 1329, 1329, 1333, 1314, 1315, 1330,
     1330, 1309, 1331, 1331, 1332, 1332, 1342, 1334, 1334, 1341,
     1318, 1335, 1335, 1336, 1336, 1344, 1317, 1337, 1337, 1338,
     1338, 1345, 1321, 1347, 1339, 1339, 1348, 1322, 1349, 1325,
     1331, 1332, 1326, 1340, 1340, 1351, 1352, 1354, 1355, 1356,
     1359, 1360, 1361, 1363, 1364, 1337, 1329, 1334, 1365, 1366,
     1367, 1330, 1335, 1368, 1369, 1336, 1339, 1370, 1341, 1371,
     1372, 1373, 1374, 1359, 1340, 1375, 1376, 1366, 1377, 1378,

     1379, 1380, 1382, 1383, 1384, 1370, 1386, 1387, 1389, 1390,
     1365, 1391, 1393, 1394, 1396, 1397, 1369, 1398, 1401, 1402,
     1403, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1427, 1428, 1429, 1429, 1430, 1430, 1431, 1431,
     1432, 1432, 1433, 1433, 1434, 1434, 1435, 1435, 1436, 1436,
     1437, 1437, 1438, 1438, 1439, 1439, 1440, 1442, 1442, 1441,
     1441, 1445, 1443, 1443, 1444, 1444, 1446, 1447, 1447, 1449,
     1448, 1448, 1450, 1452, 1452, 1429, 1435, 1436, 1453, 1431,
     1451, 1451, 1454, 1433, 1459, 1434, 1432, 1441, 1438, 1455,

     1455, 1456, 1456, 1457, 1457, 1447, 1458, 1458, 1460, 1460,
     1466, 1439, 1442, 1443, 1448, 1461, 1461, 1452, 1451, 1462,
     1462, 1455, 1463, 1463, 1464, 1464, 1465, 1465, 1467, 1469,
     1470, 1471, 1472, 1473, 1474, 1476, 1460, 1477, 1478, 1479,
     1480, 1456, 1481, 1483, 1484, 1485, 1486, 1487, 1488, 1461,
     1489, 1490, 1458, 1491, 1492, 1457, 1478, 1493, 1494, 1462,
     1495, 1496, 1497, 1463, 1498, 1501, 1503, 1504, 1505, 1506,
     1507, 1508, 1510, 1483, 1511, 1484, 1512, 1487, 1513, 1488,
     1514, 1515, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,

     1535, 1538, 1538, 1539, 1539, 1540, 1540, 1541, 1541, 1547,
     1542, 1542, 1543, 1543, 1551, 1544, 1544, 1545, 1545, 1546,
     1546, 1548, 1548, 1549, 1549, 1550, 1550, 1552, 1555, 1538,
     1556, 1539, 1553, 1553, 1559, 1554, 1554, 1540, 1542, 1557,
     1557, 1558, 1558, 1560, 1561, 1561, 1570, 1562, 1562, 1571,
     1543, 1544, 1563, 1563, 1572, 1546, 1541, 1564, 1564, 1566,
     1566, 1549, 1573, 1545, 1568, 1568, 1548, 1554, 1553, 1567,
     1567, 1569, 1569, 1558, 1574, 1557, 1562, 1575, 1576, 1563,
     1577, 1578, 1579, 1580, 1581, 1583, 1584, 1585, 1586, 1587,
     1588, 1589, 1568, 1590, 1591, 1566, 1561, 1592, 1593, 1594,

     1595, 1567, 1596, 1583, 1597, 1569, 1598, 1587, 1599, 1564,
     1584, 1600, 1601, 1602, 1588, 1603, 1604, 1579, 1605, 1606,
     1607, 1608, 1609, 1610, 1612, 1613, 1614, 1615, 1616, 1617,
     1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1627, 1628,
     1629, 1630, 1631, 1631, 1632, 1632, 1633, 1633, 1634, 1634,
     1635, 1635, 1636, 1636, 1637, 1637, 1640, 1638, 1638, 1639,
     1639, 1641, 1641, 1643, 1642, 1642, 1644, 1645, 1645, 1646,
     1646, 1647, 1648, 1649, 1649, 1650, 1650, 1651, 1652, 1661,
     1634, 1653, 1653, 1654, 1654, 1655, 1655, 1633, 1662, 1631,
     1638, 1632, 1642, 1656, 1656, 1637, 1663, 1635, 1664, 1641,

     1657, 1657, 1658, 1658, 1665, 1639, 1659, 1659, 1645, 1667,
     1668, 1660, 1660, 1669, 1649, 1671, 1670, 1672, 1674, 1673,
     1675, 1653, 1677, 1679, 1678, 1654, 1681, 1682, 1683, 1684,
     1685, 1655, 1687, 1656, 1688, 1689, 1690, 1691, 1692, 1693,
     1674, 1657, 1659, 1660, 1670, 1673, 1678, 1695, 1677, 1696,
     1697, 1698, 1699, 1700, 1701, 1702, 1703, 1705, 1706, 1707,
     1709, 1710, 1711, 1712, 1713, 1714, 1715, 1717, 1718, 1719,
     1719, 1720, 1720, 1721, 1721, 1722, 1722, 1723, 1723, 1727,
     1724, 1724, 1725, 1725, 1726, 1726, 1728, 1728, 1729, 1729,
     1730, 1732, 1732, 1733, 1735, 1735, 1736, 1737, 1738, 1738,

     1739, 1739, 1740, 1740, 1745, 1719, 1746, 1720, 1724, 1741,
     1741, 1742, 1742, 1723, 1728, 1743, 1743, 1726, 1725, 1747,
     1721, 1744, 1744, 1748, 1749, 1750, 1722, 1738, 1751, 1752,
     1753, 1754, 1755, 1756, 1729, 1757, 1759, 1760, 1741, 1739,
     1762, 1763, 1764, 1765, 1767, 1769, 1770, 1771, 1753, 1772,
     1773, 1774, 1775, 1776, 1740, 1777, 1743, 1778, 1779, 1780,
     1783, 1786, 1787, 1788, 1756, 1789, 1790, 1759, 1791, 1793,
     1795, 1795, 1796, 1796, 1797, 1797, 1798, 1798, 1799, 1799,
     1800, 1800, 1801, 1801, 1803, 1802, 1802, 1804, 1804, 1805,
     1805, 1798, 1808, 1809, 1810, 1810, 1811, 1811, 1812, 1812,

     1814, 1814, 1797, 1813, 1813, 1815, 1816, 1817, 1818, 1819,
     1801, 1820, 1795, 1821, 1796, 1822, 1823, 1824, 1826, 1827,
     1799, 1802, 1828, 1829, 1830, 1831, 1833, 1800, 1834, 1835,
     1836, 1837, 1838, 1804, 1839, 1840, 1810, 1841, 1812, 1842,
     1846, 1847, 1811, 1848, 1849, 1813, 1850, 1851, 1853, 1853,
     1854, 1854, 1823, 1855, 1855, 1856, 1856, 1857, 1857, 1858,
     1858, 1859, 1859, 1863, 1860, 1860, 1862, 1862, 1864, 1865,
     1865, 1866, 1866, 1867, 1867, 1868, 1868, 1869, 1870, 1871,
     1872, 1873, 1874, 1875, 1876, 1877, 1879, 1881, 1882, 1853,
     1859, 1854, 1860, 1883, 1884, 1858, 1885, 1886, 1857, 1887,

     1855, 1888, 1867, 1856, 1889, 1890, 1893, 1894, 1865, 1895,
     1897, 1898, 1899, 1899, 1868, 1900, 1900, 1901, 1901, 1902,
     1902, 1903, 1903, 1904, 1904, 1905, 1905, 1906, 1906, 1907,
     1908, 1909, 1909, 1910, 1910, 1911, 1911, 1914, 1915, 1917,
     1918, 1919, 1920, 1921, 1922, 1925, 1926, 1928, 1929, 1930,
     1931, 1932, 1933, 1901, 1934, 1935, 1906, 1941, 1902, 1936,
     1936, 1937, 1937, 1946, 1905, 1904, 1938, 1938, 1943, 1943,
     1939, 1939, 1940, 1940, 1947, 1910, 1948, 1909, 1944, 1944,
     1949, 1911, 1945, 1945, 1950, 1952, 1954, 1955, 1956, 1957,
     1958, 1959, 1962, 1964, 1964, 1965, 1965, 1966, 1966, 1969,

     1937, 1936, 1939, 1967, 1967, 1968, 1968, 1938, 1970, 1970,
     1971, 1940, 1975, 1976, 1977, 1981, 1982, 1944, 1983, 1984,
     1984, 1985, 1985, 1987, 1987,  997,  995,  994,  993,  992,
      991,  990,  989,  988, 1964,  987,  986, 1968,  985,  984,
      983,  982,  980,  979,  978,  976,  975,  933,  932,  931,
      930,  929,  928,  927, 1970, 1996, 1996, 1996, 1996, 1996,
     1996, 1996, 1996, 1997, 1997, 1997, 1997, 1998,  926, 1998,
     1998, 1999, 1999,  925,  924,  923, 1999, 2000,  922,  921,
     2000, 2000, 2000, 2000, 2000, 2001, 2001, 2001, 2001, 2001,
     2001, 2001, 2001, 2002,  917,  915, 2002, 2002, 2002, 2002,

     2002, 2003,  914,  913, 2003, 2003, 2003, 2003, 2003, 2004,
      912, 2004, 2004, 2004, 2004, 2004, 2004, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2006,  911, 2006, 2006, 2006,
     2006, 2006, 2006, 2007,  910, 2007, 2007, 2007, 2007, 2007,
     2007, 2008, 2008, 2008,  909,  907,  906,  905,  904,  903,
      902,  900,  898,  893,  892,  891,  890,  889,  888,  887,
      886,  885,  884,  883,  882,  881,  877,  875,  874,  873,
      872,  871,  870,  869,  867,  866,  865,  864,  863,  862,
      860,  858,  856,  855,  851,  850,  808,  807,  805,  804,
      803,  802,  801,  800,  798,  797,  796,  795,  794,  793,

      791,  790,  789,  788,  787,  786,  785,  784,  783,  782,
      781,  780,  779,  778,  777,  776,  775,  774,  773,  772,
      771,  770,  769,  768,  767,  766,  764,  763,  761,  760,
      759,  758,  757,  756,  754,  753,  752,  751,  750,  749,
      747,  746,  745,  744,  743,  742,  741,  740,  739,  738,
      737,  736,  735,  734,  733,  732,  731,  730,  729,  728,
      727,  726,  725,  724,  721,  719,  718,  715,  714,  713,
      712,  670,  669,  667,  666,  665,  664,  663,  662,  661,
      659,  658,  657,  656,  655,  654,  653,  651,  650,  649,
      647,  646,  645,  644,  643,  641,  639,  638,  637,  636,

      634,  633,  632,  631,  630,  629,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  604,  603,
      602,  600,  599,  598,  597,  596,  594,  592,  591,  590,
      589,  587,  586,  585,  584,  583,  582,  580,  579,  578,
      577,  572,  571,  570,  569,  568,  565,  562,  560,  559,
      558,  557,  512,  511,  510,  509,  508,  507,  505,  504,
      503,  502,  501,  500,  499,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  476,  475,  474,  473,  472,

      471,  470,  469,  468,  466,  465,  464,  463,  462,  461,
      460,  458,  457,  455,  454,  453,  452,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  419,  415,  413,  399,
      391,  353,  352,  351,  349,  348,  347,  346,  344,  342,
      341,  339,  338,  337,  336,  335,  332,  331,  329,  328,
      327,  325,  324,  323,  322,  320,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  307,  301,  292,  291,
      290,  289,  288,  284,  283,  281,  280,  279,  278,  277,

      274,  273,  271,  270,  269,  267,  266,  265,  264,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      248,  247,  246,  245,  243,  242,  241,  239,  237,  235,
      234,  231,  219,  209,  186,  172,  166,  161,  157,  155,
      151,  150,  149,  147,  146,  145,  144,  142,  136,  135,
      134,  133,  131,  130,  129,  128,  125,  124,  122,  121,
      118,  117,  116,  113,  110,  108,  107,  103,  102,  101,
       99,   98,   97,   96,   94,   89,   88,   87,   86,   85,
       83,   82,   81,   80,   73,   72,   71,   68,   62,   61,
       59,   57,   38,   25,   24,   22,   21,   18,   17,   16,

       14,   13,    9, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[142] =
    {   0,
0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../src/parser/parser.ll"
/*****************************************************************************
 Copyright (C) 1994-2000 the Omega Project Team
 Copyright (C) 2005-2011 Chun Chen
 All Rights Reserved.

 Purpose:
   lex parser for calculator.

 Notes:

 History:
   02/04/11 migrate to flex c++ mode, Chun Chen
*****************************************************************************/
#line 16 "../src/parser/parser.ll"
#include <stdio.h>
#include <string.h>
#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include <parser/AST.h>
#include <basic/Dynamic_Array.h>
#include "parser.tab.hh"
#include <parser/myflex.h>

myFlexLexer mylexer;
bool is_interactive;
const char *PROMPT_STRING = ">>>";

#define BUFFER scanBuf += yytext
std::string scanBuf;
std::string err_msg;
  
extern bool need_coef;

void yyerror(const std::string &s);
void flushScanBuffer();


#line 1919 "lex.yy.cc"

#define INITIAL 0
#define LATEX 1
#define INCLUDE 2
#define COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 46 "../src/parser/parser.ll"


#line 2025 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1996 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3504 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 48 "../src/parser/parser.ll"
{ BUFFER; BEGIN(INCLUDE); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "../src/parser/parser.ll"
{
  BUFFER;
  scanBuf += "\n";
  flushScanBuffer();

  if (is_interactive) {
    std::cout << "file include disabled in interactive mode\n";
  }
  else {    
    char *s = yytext;
    while (*s != '>') s++;
    *s = '\0';
    std::ifstream *ifs = new std::ifstream(yytext, std::ifstream::in);
    if (!ifs->is_open()) {
      fprintf(stderr, "Can't open file %s\n", yytext);
    }
    else {
      yy_buffer_state *bs = mylexer.yy_create_buffer(ifs, 8092);
      mylexer.yypush_buffer_state(bs);
    }
  }
  BEGIN(INITIAL);
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 72 "../src/parser/parser.ll"
{
  std::cout << "Error in include syntax\n";
  std::cout << "Use <<fname>> to include the file named fname\n";
  BEGIN(INITIAL);
  if(is_interactive) {
    std::cout << PROMPT_STRING << ' ';
    std::cout.flush();
  }
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 82 "../src/parser/parser.ll"
{
  BUFFER;
  BEGIN(INITIAL);
  if(is_interactive) {
    std::cout << PROMPT_STRING << ' ';
    std::cout.flush();
  }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 91 "../src/parser/parser.ll"
{ BUFFER; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "../src/parser/parser.ll"
{ BUFFER; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "../src/parser/parser.ll"
{ BUFFER; BEGIN(COMMENT); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "../src/parser/parser.ll"
{ BUFFER; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "../src/parser/parser.ll"
{ BUFFER; BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "../src/parser/parser.ll"
{ BUFFER; BEGIN(LATEX); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "../src/parser/parser.ll"
{ BUFFER; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "../src/parser/parser.ll"
{ BUFFER; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 99 "../src/parser/parser.ll"
{ BUFFER; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 101 "../src/parser/parser.ll"
{ BUFFER;  return OPEN_BRACE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 102 "../src/parser/parser.ll"
{ BUFFER;  return OPEN_BRACE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 103 "../src/parser/parser.ll"
{ BUFFER;  return CLOSE_BRACE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 104 "../src/parser/parser.ll"
{ BUFFER;  return CLOSE_BRACE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 105 "../src/parser/parser.ll"
{ BUFFER;  return APPROX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 106 "../src/parser/parser.ll"
{ BUFFER;  return UNION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 107 "../src/parser/parser.ll"
{ BUFFER;  return UNION; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 108 "../src/parser/parser.ll"
{ BUFFER;  return INTERSECTION; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 109 "../src/parser/parser.ll"
{ BUFFER;  return INTERSECTION; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 110 "../src/parser/parser.ll"
{ BUFFER;  return SYMBOLIC; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 111 "../src/parser/parser.ll"
{ BUFFER;  return SYMBOLIC; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 112 "../src/parser/parser.ll"
{ BUFFER;  return VERTICAL_BAR; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 113 "../src/parser/parser.ll"
{ BUFFER;  return VERTICAL_BAR; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 114 "../src/parser/parser.ll"
{ BUFFER;  return SUCH_THAT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 115 "../src/parser/parser.ll"
{ BUFFER;  return SUCH_THAT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 116 "../src/parser/parser.ll"
{ BUFFER;  return INVERSE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 117 "../src/parser/parser.ll"
{ BUFFER;  return COMPLEMENT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 118 "../src/parser/parser.ll"
{ BUFFER;  return COMPOSE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 119 "../src/parser/parser.ll"
{ BUFFER;  return COMPOSE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 120 "../src/parser/parser.ll"
{ BUFFER;  return DIFFERENCE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 121 "../src/parser/parser.ll"
{ BUFFER;  return DIFFERENCE_TO_RELATION; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 122 "../src/parser/parser.ll"
{ BUFFER;  return PROJECT_AWAY_SYMBOLS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 123 "../src/parser/parser.ll"
{ BUFFER;  return PROJECT_AWAY_SYMBOLS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 124 "../src/parser/parser.ll"
{ BUFFER;  return PROJECT_AWAY_SYMBOLS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 125 "../src/parser/parser.ll"
{ BUFFER;  return PROJECT_ON_SYMBOLS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 126 "../src/parser/parser.ll"
{ BUFFER;  return PROJECT_ON_SYMBOLS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 127 "../src/parser/parser.ll"
{ BUFFER;  return PROJECT_ON_SYMBOLS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 128 "../src/parser/parser.ll"
{ BUFFER;  return JOIN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 129 "../src/parser/parser.ll"
{ BUFFER;  return JOIN; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 130 "../src/parser/parser.ll"
{ BUFFER;  return JOIN; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 131 "../src/parser/parser.ll"
{ BUFFER;  return DOMAIN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 132 "../src/parser/parser.ll"
{ BUFFER;  return RANGE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 133 "../src/parser/parser.ll"
{ BUFFER;  return FORALL; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 134 "../src/parser/parser.ll"
{ BUFFER;  return FORALL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 135 "../src/parser/parser.ll"
{ BUFFER;  return EXISTS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 136 "../src/parser/parser.ll"
{ BUFFER;  return EXISTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 138 "../src/parser/parser.ll"
{ BUFFER; return VENN; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 139 "../src/parser/parser.ll"
{ BUFFER; return CONVEX_REPRESENTATION; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 140 "../src/parser/parser.ll"
{ BUFFER; return CONVEX_COMBINATION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 141 "../src/parser/parser.ll"
{ BUFFER; return POSITIVE_COMBINATION; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 142 "../src/parser/parser.ll"
{ BUFFER; return LINEAR_COMBINATION; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 143 "../src/parser/parser.ll"
{ BUFFER; return AFFINE_COMBINATION; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 144 "../src/parser/parser.ll"
{ /*deprecated*/ BUFFER; return RECT_HULL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 145 "../src/parser/parser.ll"
{ BUFFER; return SIMPLE_HULL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 146 "../src/parser/parser.ll"
{ BUFFER; return CONVEX_HULL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 147 "../src/parser/parser.ll"
{ BUFFER; return DECOUPLED_CONVEX_HULL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 148 "../src/parser/parser.ll"
{ BUFFER; return AFFINE_HULL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 149 "../src/parser/parser.ll"
{ BUFFER; return CONIC_HULL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 150 "../src/parser/parser.ll"
{ BUFFER; return LINEAR_HULL; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 151 "../src/parser/parser.ll"
{ /*deprecated*/ BUFFER; return PAIRWISE_CHECK; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 152 "../src/parser/parser.ll"
{ /*deprecated*/ BUFFER; return CONVEX_CHECK; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 153 "../src/parser/parser.ll"
{ /*deprecated*/ BUFFER; return QUICK_HULL; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 154 "../src/parser/parser.ll"
{ BUFFER; return HULL; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 155 "../src/parser/parser.ll"
{ BUFFER;  return FARKAS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 156 "../src/parser/parser.ll"
{ BUFFER;  return DECOUPLED_FARKAS; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 157 "../src/parser/parser.ll"
{ BUFFER;  return DECOUPLED_FARKAS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 158 "../src/parser/parser.ll"
{ BUFFER;  return DECOUPLED_FARKAS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 160 "../src/parser/parser.ll"
{ BUFFER;  return MINIMIZE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 161 "../src/parser/parser.ll"
{ BUFFER;  return MAXIMIZE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 162 "../src/parser/parser.ll"
{ BUFFER;  return MINIMIZE_RANGE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 163 "../src/parser/parser.ll"
{ BUFFER;  return MAXIMIZE_RANGE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 164 "../src/parser/parser.ll"
{ BUFFER;  return MINIMIZE_RANGE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 165 "../src/parser/parser.ll"
{ BUFFER;  return MAXIMIZE_RANGE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 166 "../src/parser/parser.ll"
{ BUFFER;  return MINIMIZE_DOMAIN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 167 "../src/parser/parser.ll"
{ BUFFER;  return MAXIMIZE_DOMAIN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 168 "../src/parser/parser.ll"
{ BUFFER;  return MINIMIZE_DOMAIN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "../src/parser/parser.ll"
{ BUFFER;  return MAXIMIZE_DOMAIN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 170 "../src/parser/parser.ll"
{ BUFFER;  return GIST; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 171 "../src/parser/parser.ll"
{ BUFFER;  return GIVEN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 172 "../src/parser/parser.ll"
{ BUFFER;  return WITHIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 173 "../src/parser/parser.ll"
{ BUFFER;  return SUBSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 174 "../src/parser/parser.ll"
{ BUFFER;  return CODEGEN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 175 "../src/parser/parser.ll"
{ BUFFER;  return MAKE_UPPER_BOUND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 176 "../src/parser/parser.ll"
{ BUFFER;  return MAKE_LOWER_BOUND; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 177 "../src/parser/parser.ll"
{ BUFFER;  return SUPERSETOF;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "../src/parser/parser.ll"
{ BUFFER;  return SUBSETOF;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "../src/parser/parser.ll"
{ BUFFER;  return SYM_SAMPLE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "../src/parser/parser.ll"
{ BUFFER;  return SAMPLE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "../src/parser/parser.ll"
{ BUFFER;  return CARRIED_BY;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "../src/parser/parser.ll"
{ BUFFER;  return REACHABLE_FROM; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 183 "../src/parser/parser.ll"
{ BUFFER;  return REACHABLE_OF; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 184 "../src/parser/parser.ll"
{ BUFFER;  return RESTRICT_DOMAIN; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 185 "../src/parser/parser.ll"
{ BUFFER;  return RESTRICT_DOMAIN; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 186 "../src/parser/parser.ll"
{ BUFFER;  return RESTRICT_DOMAIN; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 187 "../src/parser/parser.ll"
{ BUFFER;  return RESTRICT_RANGE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 188 "../src/parser/parser.ll"
{ BUFFER;  return RESTRICT_RANGE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 189 "../src/parser/parser.ll"
{ BUFFER;  return ASSERT_UNSAT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 190 "../src/parser/parser.ll"
{ BUFFER;  return ASSERT_UNSAT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 192 "../src/parser/parser.ll"
{ BUFFER; return RESTRICT_RANGE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 193 "../src/parser/parser.ll"
{ BUFFER; return AND; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 194 "../src/parser/parser.ll"
{ BUFFER; return OR; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 195 "../src/parser/parser.ll"
{ BUFFER; return AND; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 196 "../src/parser/parser.ll"
{ BUFFER; return OR; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 197 "../src/parser/parser.ll"
{ BUFFER; return AND; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 198 "../src/parser/parser.ll"
{ BUFFER; return OR; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 199 "../src/parser/parser.ll"
{ BUFFER; return AND; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 200 "../src/parser/parser.ll"
{ BUFFER; return OR; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 201 "../src/parser/parser.ll"
{ BUFFER; return NOT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 202 "../src/parser/parser.ll"
{ BUFFER; return NOT; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 203 "../src/parser/parser.ll"
{ BUFFER; return NOT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 204 "../src/parser/parser.ll"
{ BUFFER; return IS_ASSIGNED; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 205 "../src/parser/parser.ll"
{ BUFFER; return GOES_TO; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 206 "../src/parser/parser.ll"
{ BUFFER; return IN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 207 "../src/parser/parser.ll"
{ BUFFER; return GOES_TO; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 208 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = leq; return REL_OP; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 209 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = leq; return REL_OP; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 210 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = leq; return REL_OP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 211 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = geq; return REL_OP; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 212 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = geq; return REL_OP; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 213 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = geq; return REL_OP; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 214 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = neq; return REL_OP; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 215 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = neq; return REL_OP; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 216 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = lt; return REL_OP; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 217 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = gt; return REL_OP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 218 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = eq; return REL_OP; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 219 "../src/parser/parser.ll"
{ BUFFER; yylval.REL_OPERATOR = eq; return REL_OP; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 221 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  return VAR;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 227 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  yylval.VAR_NAME[yyleng-3] = 'i';  // lowercase
  yylval.VAR_NAME[yyleng-2] = 'n';
  return VAR;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 235 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  yylval.VAR_NAME[yyleng-4] = 'i';  // Change to "in"
  yylval.VAR_NAME[yyleng-3] = 'n';  // Be afraid
  yylval.VAR_NAME[yyleng-2] = ')';
  yylval.VAR_NAME[yyleng-1] = '\0';
  return VAR;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 245 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  yylval.VAR_NAME[yyleng-4] = 'o';  // lowercase
  yylval.VAR_NAME[yyleng-3] = 'u';
  yylval.VAR_NAME[yyleng-2] = 't';
  return VAR;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 254 "../src/parser/parser.ll"
{
  BUFFER;  
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  return VAR;
 }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 260 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  yylval.VAR_NAME[yyleng-3] = 'i';  // lowercase
  yylval.VAR_NAME[yyleng-2] = 'n';
  return VAR;
 }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 268 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  yylval.VAR_NAME[yyleng-4] = 'i';  // Change to "in"
  yylval.VAR_NAME[yyleng-3] = 'n';  // Be afraid
  yylval.VAR_NAME[yyleng-2] = ')';
  yylval.VAR_NAME[yyleng-1] = '\0';
  return VAR;
 }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 278 "../src/parser/parser.ll"
{
  BUFFER;
  yylval.VAR_NAME = new char[yyleng+1];
  strcpy(yylval.VAR_NAME,yytext);
  yylval.VAR_NAME[yyleng-4] = 'o';  // lowercase
  yylval.VAR_NAME[yyleng-3] = 'u';
  yylval.VAR_NAME[yyleng-2] = 't';
  return VAR;
 }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 288 "../src/parser/parser.ll"
{ BUFFER;
  if (need_coef) {
    sscanf(yytext, coef_fmt, &yylval.COEF_VALUE);
    return COEF;   
  }
  else {
    yylval.INT_VALUE = atoi(yytext);
    return INT;
  }
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 299 "../src/parser/parser.ll"
{ BUFFER;
  yytext[yyleng-1]='\0';
  yylval.STRING_VALUE = new std::string(yytext+1);
  return STRING;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LATEX):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(COMMENT):
#line 306 "../src/parser/parser.ll"
{
  mylexer.yypop_buffer_state();
  if (!YY_CURRENT_BUFFER) {
    flushScanBuffer();
    return YY_NULL;
  }
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 314 "../src/parser/parser.ll"
{ BUFFER; return yytext[0]; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 317 "../src/parser/parser.ll"
ECHO;
	YY_BREAK
#line 2947 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1996 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1996 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1995);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 317 "../src/parser/parser.ll"



void flushScanBuffer() {
  if (scanBuf.size() == 0)
    return;
  if (!is_interactive) {
    size_t prev_pos = 0;
    if (scanBuf[0] == '\n')
      prev_pos = 1;
    for (size_t pos = prev_pos; pos <= scanBuf.size(); pos++) {
      if (pos == scanBuf.size() || scanBuf[pos] == '\n') {
        std::cout << PROMPT_STRING << " " << scanBuf.substr(prev_pos, pos-prev_pos) << std::endl;
        prev_pos = pos+1;
      }
    }
  }

  scanBuf.clear();
}

